@model WebTinTuc.Models.EmbebModel
@{
    ViewBag.Title = "Cập nhật thông báo nổi bật";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section styles {
    @Styles.Render("~/Content/dropzonescss")
}

<script src="~/Content/ckeditor/ckeditor.js"></script>

<div class="row">
    <div class="col-lg-12">
        <div class="page-header">
            <h3>@ViewBag.Title</h3>
        </div>
        @if (TempData["Updated"] != null)
        {
            <div class="alert alert-success alert-dismissible fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                @Html.Raw(TempData["Updated"])
            </div>
        }

    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default box box-primary">

            <div class="panel-body">
                @if (Model != null)
                {
                    using (Html.BeginForm("UpdateEmbed", "Embeds", FormMethod.Post, htmlAttributes: new { @class = "form-horizontal", role = "form", @id = "UpdateEmbed" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.EmbedId)

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmbedName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.EmbedName, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.EmbedName, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmbedFile, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.EmbedFile, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.EmbedFile, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 col-md-offset-2">
                                <div id="dZUpload" class="dropzone">
                                    <div class="dz-default dz-message" data-dz-message>
                                        <span>Kéo tệp FLASH (.swf) vào hoặc chọn tệp (.swf) cần tải lên</span>
                                        <span class="btn btn-primary">Chọn tệp</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <label>
                                    @Html.CheckBoxFor(model => model.EmbebOption) Tùy chọn nâng cao.
                                </label>
                            </div>
                        </div>

                        <div class="form-group" id="show-option-advanced" style="display: none;">
                            @Html.LabelFor(model => model.EmbebContent, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.EmbebContent, htmlAttributes: new { @class = "form-control", type = "number", row = 10 })
                            </div>
                        </div>

                        <script>
                            //CKEDITOR.replace('ArticleContent');
                            var roxyFileman = '/Content/fileman/index.html';
                            $(function () {
                                CKEDITOR.replace('EmbebContent', {
                                    filebrowserBrowseUrl: roxyFileman,
                                    filebrowserImageBrowseUrl: roxyFileman + '?type=image',
                                    removeDialogTabs: 'link:upload;image:upload'
                                });
                                //});
                            });

                            $('#EmbebOption').on('change', function () {
                                if ($(this).is(":checked")) {
                                    $('#show-option-advanced').fadeIn();
                                } else {
                                    $('#show-option-advanced').fadeOut();
                                }
                            })

                        </script>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button class="btn btn-primary" type="submit">Cập nhật thông báo</button>
                            </div>
                        </div>

                    }
                }
                else
                {
                    <span>Không có thông báo nào.</span>
                }
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/dropzonescripts")
    <script>
        $(document).ready(function () {
            Dropzone.autoDiscover = false;
            $("#dZUpload").dropzone({
                url: "/Embeds/SaveFileFlash",
                addRemoveLinks: true,
                maxFiles: 1,
                maxFilesize: 50,
                uploadMultiple: false,
                accept: function (file, done) {
                    if (getExtension(file.name) == "exe" || getExtension(file.name) == "dll" || getExtension(file.name) == "iso" || getExtension(file.name) == "zip" || getExtension(file.name) == "rar") {
                        done("Tệp này không được phép tải lên.");
                    }
                    else { done(); }
                },
                dictFallbackMessage: "Trình duyệt của bạn không hỗ trợ kéo thả tệp để tải lên.",
                dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
                dictFileTooBig: "Tệp có dung lượng quá lớn ({{filesize}}MiB). Dung lượng cho phép: {{maxFilesize}}MiB.",
                dictInvalidFileType: "Tệp bạn chọn không được phép tải lên.",
                dictResponseError: "Server responded with {{statusCode}} code.",
                dictCancelUpload: "Hủy tải lên",
                dictCancelUploadConfirmation: "Bạn chắc chắn muốn hủy tải lên?",
                dictRemoveFile: "Loại bỏ tệp tin",
                dictMaxFilesExceeded: "Bạn không thể tải lên nhiều tệp.",
                success: function (file, response) {
                    var imgPath = response.Message;
                    file.previewElement.classList.add("dz-success");
                    $('input#EmbedFile').val(imgPath);
                },
                error: function (file, response) {
                    file.previewElement.classList.add("dz-error");
                    $(file.previewElement).find('.dz-error-message').text(response);
                }
            });

        })

    </script>

}

